buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.ajoberstar.grgit:grgit-gradle:5.+'
        classpath 'com.gorylenko.gradle-git-properties:gradle-git-properties:2.+'
        classpath 'org.cyclonedx:cyclonedx-gradle-plugin:2.+'
    }
}

plugins {
    alias(libs.plugins.springBoot)
}

ext.buildTime = new Date().toInstant()

task clean

apply plugin: 'org.ajoberstar.grgit'
apply from: "$rootDir/gradle/idea.gradle"

allprojects {
    task cleanAll {
        description = 'Deletes the build directory and the IDE files and directories'
        group = 'build'
        dependsOn clean, cleanIdea, cleanIdeaWorkspace
        doLast {
            delete 'out', '.idea'
        }
    }
}

subprojects {
    repositories {
        mavenCentral()
    }

    if (project.name != 'load-gen') {
        apply plugin: 'java'

        group = 'org.example.teahouse'
        version = "${grgit.head().abbreviatedId}.${buildTime.toEpochMilli()}"

        dependencies {
            ['annotationProcessor', 'compileOnly', 'implementation', 'runtimeOnly', 'testImplementation'].each { conf ->
                dependencies.add(conf, platform(libs.springBoot))
                dependencies.add(conf, platform(libs.springCloud))
                dependencies.add(conf, platform(libs.springData))
            }
            testImplementation platform('org.junit:junit-bom:latest.release')

            annotationProcessor 'org.projectlombok:lombok'
            compileOnly 'org.projectlombok:lombok'

            testImplementation 'org.junit.jupiter:junit-jupiter'
            testImplementation 'io.rest-assured:rest-assured'
            testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        }

        java {
            toolchain { languageVersion = JavaLanguageVersion.of(24) }
        }

        jar.manifest.attributes(
            'Name': project.name,
            'Implementation-Build-Date': buildTime,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': project.group,
            'Commit-AbbreviatedId': grgit.head().abbreviatedId,
            'Commit-Id': grgit.head().id,
            'Commit-Date': grgit.head().getDateTime().toInstant(),
            'Source-Path': grgit.remote.list().findResult { it.name == 'origin' ? it.url : null },
            'Created-By': "Gradle ${gradle.gradleVersion}",
            'Built-By': System.properties['user.name'],
            'JDK': org.gradle.internal.jvm.Jvm.current(),
            'OS': org.gradle.internal.os.OperatingSystem.current()
        )

        test {
            useJUnitPlatform()
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    // gradleVersion = new groovy.json.JsonSlurper().parseText('https://services.gradle.org/versions/current'.toURL().text).version
}
