plugins {
    alias(libs.plugins.asciidoctor)
}

apply from: "$rootDir/gradle/spring-boot.gradle"

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    implementation 'org.zalando:logbook-spring-boot-starter'

    runtimeOnly 'com.github.loki4j:loki-logback-appender:latest.release'

}

// TODO: remove this once the Boot Gradle Plugin works with Java 22
springBoot.mainClass = 'org.example.teahouse.proxy.ProxyServiceApplication'

configurations {
    adoc
}

dependencies {
    adoc "io.micrometer:micrometer-docs-generator:${libs.versions.micrometerDocsVersion.get()}"
}

build.dependsOn("generateObservabilityDocs")
build.dependsOn("asciidoctor")

task generateObservabilityDocs(type: JavaExec) {
    mainClass = "io.micrometer.docs.DocsGeneratorCommand"
    classpath configurations.adoc
    // input folder, inclusion pattern, output folder
    args project.projectDir.getAbsolutePath(), ".*", "${project.buildDir.getAbsolutePath()}/observations"
}

sourceSets.main.resources.srcDirs += [ "${buildDir}/docs/" ]

task copyDocs(type: Copy) {
    dependsOn("generateObservabilityDocs")
    from 'src/docs/asciidoc'
    into 'build/observations'
}

asciidoctor {
    baseDirFollowsSourceFile()
    dependsOn("generateObservabilityDocs", "copyDocs")
    sourceDir  file("${buildDir}/observations")
    outputDir  file('build/docs/META-INF/resources/actuator/observability/')
}
