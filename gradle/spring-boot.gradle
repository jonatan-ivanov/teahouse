apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'

ext.profiles = project.hasProperty('profiles') ? project.getProperty('profiles').split(',') : ['local'] // ./gradlew bootRun -Pprofiles=profileName

dependencies {
    if (!project.getName().contains("proxy")) {
        implementation project(':core')
    } else {
        implementation(project(':core')) {
            exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
            exclude group: 'org.springframework', module: 'spring-mvc'
        }
    }

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    if (!project.getName().contains("proxy")) {
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
    implementation 'io.micrometer:micrometer-registry-prometheus'

    compileOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly libs.jolokia

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar.manifest.attributes += jar.manifest.attributes

processResources {
    filesMatching('build.properties') { it.expand(project.properties) }
}

springBoot {
    buildInfo()
}

def commonjvmArgs = [
    '-server',
    // '-XX:+PrintFlagsFinal',
    '-XX:NativeMemoryTracking=summary',
    // '-XX:+UnlockDiagnosticVMOptions',
    // '-XX:+PrintNMTStatistics',
    '-XX:MinHeapSize=256M',
    '-XX:MaxHeapSize=256M',
    '-XX:MaxMetaspaceSize=256M',
    '-XX:MaxDirectMemorySize=256M',
    '-XX:+HeapDumpOnOutOfMemoryError',
    "-XX:HeapDumpPath=$rootDir/logs",
    "-Xlog:gc*:file=$rootDir/logs/$project.name-gc.log:time,uptime,pid,tid,level,tags:filecount=5,filesize=5M",

    '-Djava.security.egd=file:/dev/./urandom',
    '-Duser.timezone=UTC',
    '-Dfile.encoding=UTF-8'
]

mkdir "$rootDir/logs"
bootRun {
    doFirst {
        if (isPortOpen('localhost', 3100) && 'loki' !in profiles) { // is Loki listening?
            profiles += 'loki'
        }
        jvmArgs += commonjvmArgs + [
                "-Dspring.profiles.active=${profiles.join(',')}",
                "-Dspring.application.home=$rootDir"
        ]
    }
}

test {
    jvmArgs += commonjvmArgs + [
        "-Dspring.application.home=$rootDir"
    ]
}

private static boolean isPortOpen(String host, int port) {
    try {
        new Socket(host, port).close()
        return true
    }
    catch (Exception exception) {
        return false
    }

}
